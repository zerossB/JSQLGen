/*
 (c)Copyright 2005~2010 Marcos Morise.

    toolbox.SQLViewer é um software livre; você pode redistribui-lo e/ou
    modifica-lo dentro dos termos da Licença Pública Geral GNU como
    publicada pela Fundação do Software Livre (FSF); na versão 3 da
    Licença.

    Este programa é distribuido na esperança que possa ser util,
    mas SEM NENHUMA GARANTIA; sem uma garantia implicita de ADEQUAÇÂO
    a qualquer MERCADO ou APLICAÇÃO EM PARTICULAR. Veja a
    Licença Pública Geral GNU para maiores detalhes.

    Você deve ter recebido uma cópia da Licença Pública Geral GNU
    junto com este programa, se não, veja em:
    <http://www.gnu.org/licenses/>
 */

/*
 * SQLViewer.java
 *
 * Created on 19/11/2010, 14:53:19
 */

package toolbox;

/**
 *
 * @author marcos morise
 */
public class SQLViewer extends javax.swing.JDialog {

    private java.sql.Connection connection;

    /** Creates new form SQLViewer */
    public SQLViewer(java.awt.Window parent, java.sql.Connection connection) {
        super(parent);
        this.connection = connection;
        initComponents();
        this.setVisible(true);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pQuery = new javax.swing.JPanel();
        sQuery = new javax.swing.JScrollPane();
        tQuery = new javax.swing.JTextArea();
        bExecute = new javax.swing.JButton();
        sTable = new javax.swing.JScrollPane();
        tTable = new javax.swing.JTable();
        bPrint = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("SQL Viewer");
        setModal(true);

        pQuery.setBorder(javax.swing.BorderFactory.createTitledBorder("Query SQL"));
        pQuery.setLayout(new java.awt.BorderLayout());

        tQuery.setColumns(20);
        tQuery.setRows(5);
        sQuery.setViewportView(tQuery);

        pQuery.add(sQuery, java.awt.BorderLayout.CENTER);

        bExecute.setIcon(new javax.swing.ImageIcon(getClass().getResource("/toolbox/images/stock_data-new-sql-query-16.png"))); // NOI18N
        bExecute.setMnemonic('x');
        bExecute.setText("Execute");
        bExecute.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bExecute.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        bExecute.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bExecuteActionPerformed(evt);
            }
        });
        pQuery.add(bExecute, java.awt.BorderLayout.EAST);

        getContentPane().add(pQuery, java.awt.BorderLayout.NORTH);

        tTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        sTable.setViewportView(tTable);

        getContentPane().add(sTable, java.awt.BorderLayout.CENTER);

        bPrint.setIcon(new javax.swing.ImageIcon(getClass().getResource("/toolbox/images/stock_print-16.png"))); // NOI18N
        bPrint.setMnemonic('p');
        bPrint.setText("Imprimir");
        bPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bPrintActionPerformed(evt);
            }
        });
        getContentPane().add(bPrint, java.awt.BorderLayout.SOUTH);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-490)/2, (screenSize.height-481)/2, 490, 481);
    }// </editor-fold>//GEN-END:initComponents

    private void bExecuteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bExecuteActionPerformed
        try {
            java.sql.Statement st = connection.createStatement();
            java.sql.ResultSet rs = st.executeQuery(tQuery.getText());
            java.util.Vector cols = new java.util.Vector();
            java.util.Vector rows = new java.util.Vector();
            for(int i=1; i<=rs.getMetaData().getColumnCount(); i++) {
                cols.add(rs.getMetaData().getColumnName(i));
            }
            while(rs.next()) {
                java.util.Vector line = new java.util.Vector();
                for(int i=1; i<=rs.getMetaData().getColumnCount(); i++) {
                    switch( rs.getMetaData().getColumnType( i ) ) {
                        case java.sql.Types.DATE: line.addElement(rs.getDate( i )); break;
                        case java.sql.Types.TIME: line.addElement(rs.getTime( i )); break;
                        case java.sql.Types.BOOLEAN:
                        case java.sql.Types.BIT: line.addElement( new Boolean( rs.getBoolean( i ) ) ); break;
                        case java.sql.Types.NUMERIC:
                        case java.sql.Types.DECIMAL:
                        case java.sql.Types.FLOAT:
                        case java.sql.Types.DOUBLE:
                        case java.sql.Types.REAL: line.addElement( new Float( rs.getFloat( i ) ) ); break;
                        case java.sql.Types.INTEGER: line.addElement( new Integer( rs.getInt( i ) ) ); break;
                        case java.sql.Types.TINYINT: line.addElement( new Byte( rs.getByte( i ) ) ); break;
                        default: line.addElement(rs.getString(i)); break;
                    }
                }
                rows.add(line);
            }
            st.close();
            javax.swing.table.DefaultTableModel mTable = (javax.swing.table.DefaultTableModel)tTable.getModel();
            mTable.setDataVector(rows, cols);
        }
        catch (java.sql.SQLException e) {
            javax.swing.JOptionPane.showMessageDialog(this, "Falha na leitura do banco de dados!\n"+e.getMessage(),"Aviso",javax.swing.JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_bExecuteActionPerformed

    private void bPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bPrintActionPerformed
        javax.swing.table.DefaultTableModel mTable = (javax.swing.table.DefaultTableModel)tTable.getModel();
        String print = "";
        print += "<html>";
        print += "<body>";
        print += "<table border=1 width=100%>";
        print += "<caption>"+tQuery.getText()+"</caption>";
        print += "<tr>";
        for(int j=0;j<mTable.getColumnCount();j++)
            print += "<th>"+mTable.getColumnName(j);
        for(int i=0;i<mTable.getRowCount();i++){
            print += "<tr>";
            for(int j=0;j<mTable.getColumnCount();j++)
                print += "<td>"+mTable.getValueAt(i,j);
        }
        print += "</table>";
        print += "</body>";
        print += "</html>";
        new toolbox.print.PrintHTML(print);
    }//GEN-LAST:event_bPrintActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bExecute;
    private javax.swing.JButton bPrint;
    private javax.swing.JPanel pQuery;
    private javax.swing.JScrollPane sQuery;
    private javax.swing.JScrollPane sTable;
    private javax.swing.JTextArea tQuery;
    private javax.swing.JTable tTable;
    // End of variables declaration//GEN-END:variables

}
